\babel@toc {UKenglish}{}\relax 
\addvspace {10\p@ }
\contentsline {figure}{\numberline {1.1}{\ignorespaces Townscaper uses WFC with player input to develop worlds \blx@tocontentsinit {0}\cite {townscaper}}}{1}{figure.caption.7}%
\contentsline {figure}{\numberline {1.2}{\ignorespaces Use of simple tiled WFC to generate a circuit board graphic \blx@tocontentsinit {0}\cite {Gumin_Wave_Function_Collapse_2016}}}{2}{figure.caption.8}%
\contentsline {figure}{\numberline {1.3}{\ignorespaces A complex Escheresque tile set that relies on modifying in blocks \blx@tocontentsinit {0}\cite {model_synthesis_diss}}}{2}{figure.caption.9}%
\contentsline {figure}{\numberline {1.4}{\ignorespaces A glimpse into the IMIB pipeline. Each layer defines a small part of each chunk to run WFC in. By clearing and running four overlapping layers, a full grid is generated. \blx@tocontentsinit {0}\cite {Infinite_Modifying_In_Blocks}}}{3}{figure.caption.10}%
\addvspace {10\p@ }
\addvspace {10\p@ }
\contentsline {figure}{\numberline {3.1}{\ignorespaces Basic model for the Algorithm Selection Problem \blx@tocontentsinit {0}\cite {Data_Mining_and_Constraint_Programming}}}{6}{figure.caption.13}%
\contentsline {figure}{\numberline {3.2}{\ignorespaces Examples of generated house plans \blx@tocontentsinit {0}\cite {Prolog_Deep_Learning}}}{6}{figure.caption.14}%
\contentsline {figure}{\numberline {3.3}{\ignorespaces Python converting user-specified constraints into Prolog queries \blx@tocontentsinit {0}\cite {Prolog_Deep_Learning}}}{7}{figure.caption.15}%
\contentsline {figure}{\numberline {3.4}{\ignorespaces Examples of dungeons generated using ASP \blx@tocontentsinit {0}\cite {pcgbook}}}{7}{figure.caption.16}%
\contentsline {figure}{\numberline {3.5}{\ignorespaces Generating a variation from a larger dungeon \blx@tocontentsinit {0}\cite {Graph_Constraint_Dungeon}}}{8}{figure.caption.17}%
\contentsline {figure}{\numberline {3.6}{\ignorespaces Zelda-style levels being generated by a Random Level Generator (a), Constructive Level Generator (b) and Search-Based Level Generator (c) \blx@tocontentsinit {0}\cite {GVG-AI_and_VGDL_Level_Generators}}}{8}{figure.caption.18}%
\contentsline {figure}{\numberline {3.7}{\ignorespaces Comparing performance of Plotting models and solvers \blx@tocontentsinit {0}\cite {Plotting_Planning_Problem}}}{9}{figure.caption.19}%
\contentsline {figure}{\numberline {3.8}{\ignorespaces Bad North uses WFC to generate islands traversable by AI \blx@tocontentsinit {0}\cite {badnorth}}}{9}{figure.caption.20}%
\contentsline {figure}{\numberline {3.9}{\ignorespaces Generating pillars of different lengths from input model pieces \blx@tocontentsinit {0}\cite {model_synthesis_diss}}}{10}{figure.caption.21}%
\contentsline {figure}{\numberline {3.10}{\ignorespaces The overlapping WFC pipeline with \(3\times 3\) overlap \blx@tocontentsinit {0}\cite {WFC_ConstraintSolving_and_ML}}}{11}{figure.caption.23}%
\contentsline {figure}{\numberline {3.11}{\ignorespaces Caves of Qud's multi-pass approach to avoid homogeneity \blx@tocontentsinit {0}\cite {GDC_caves_of_qud}}}{12}{figure.caption.26}%
\contentsline {figure}{\numberline {3.12}{\ignorespaces Use of the global maximum constraint to limit water tiles \blx@tocontentsinit {0}\cite {WFC_Automatic_Rules_And_Better_Symmetries}}}{12}{figure.caption.27}%
\contentsline {figure}{\numberline {3.13}{\ignorespaces Use of the global minimum constraint to pre-place tiles \blx@tocontentsinit {0}\cite {WFC_Automatic_Rules_And_Better_Symmetries}}}{13}{figure.caption.28}%
\contentsline {figure}{\numberline {3.14}{\ignorespaces Use of the object distance constraint to improve object spawns \blx@tocontentsinit {0}\cite {WFC_Automatic_Rules_And_Better_Symmetries}}}{13}{figure.caption.29}%
\contentsline {figure}{\numberline {3.15}{\ignorespaces Use of the double-layer generation to ease object spawning \blx@tocontentsinit {0}\cite {WFC_Automatic_Rules_And_Better_Symmetries}}}{14}{figure.caption.30}%
\contentsline {figure}{\numberline {3.16}{\ignorespaces Caves of Qud's multi-pass approach to avoid overfitting \blx@tocontentsinit {0}\cite {GDC_caves_of_qud}}}{15}{figure.caption.32}%
\contentsline {figure}{\numberline {3.17}{\ignorespaces Comparing performance of WFC with and without backtracking and global constraints. When using global constraints, backtracking significantly improves performance. \blx@tocontentsinit {0}\cite {WFC_ConstraintSolving_and_ML}}}{16}{figure.caption.34}%
\contentsline {figure}{\numberline {3.18}{\ignorespaces Large-scale game implementation with N-WFC and sub-complete tile set. First, it requires (a) one sub-complete tile set. Then the (b) Exterior Generation Process uses (c) Diagonal Generation Process to start generating. Each (d) sub-grid uses (e) I-WFC to find an accepted solution and overlap its edge with the adjacent sub-grids, forming an (f) final soluton. \blx@tocontentsinit {0}\cite {Nested_WFC}}}{16}{figure.caption.35}%
\contentsline {figure}{\numberline {3.19}{\ignorespaces Infinite game implementation with N-WFC and sub-complete tile set \blx@tocontentsinit {0}\cite {Nested_WFC}}}{17}{figure.caption.36}%
\contentsline {figure}{\numberline {3.20}{\ignorespaces Placing nodes on a navigation mesh using graph-based WFC \blx@tocontentsinit {0}\cite {WFC_Graph-based}}}{18}{figure.caption.38}%
\contentsline {figure}{\numberline {3.21}{\ignorespaces Using growing grid and WFC to generate more complex worlds \blx@tocontentsinit {0}\cite {WFC_Neural_Network}}}{18}{figure.caption.39}%
\contentsline {figure}{\numberline {3.22}{\ignorespaces Minecraft lets the player explore an infinite, procedural world \blx@tocontentsinit {0}\cite {minecraft_screenshot}}}{20}{figure.caption.41}%
\contentsline {figure}{\numberline {3.23}{\ignorespaces Magic3D performs text-to-3D synthesis \blx@tocontentsinit {0}\cite {Magic3D}}}{21}{figure.caption.42}%
\contentsline {figure}{\numberline {3.24}{\ignorespaces Stable Diffusion offers text-to-image synthesis \blx@tocontentsinit {0}\cite {Stable_Diffusion}}}{22}{figure.caption.43}%
\contentsline {figure}{\numberline {3.25}{\ignorespaces Games generated using the Video Game Description Language \blx@tocontentsinit {0}\cite {VGDL}}}{22}{figure.caption.44}%
\contentsline {figure}{\numberline {3.26}{\ignorespaces CESAGAN extends upon Generative Adversarial Networks to encourage generation of playable levels requiring additional constraints (top) instead of unplayable levels (bottom) \blx@tocontentsinit {0}\cite {CESAGAN}}}{23}{figure.caption.45}%
\addvspace {10\p@ }
\addvspace {10\p@ }
\addvspace {10\p@ }
\addvspace {10\p@ }
\contentsline {figure}{\numberline {7.1}{\ignorespaces A \(3\times 3\) cell grid as an undirected and directed graph}}{29}{figure.caption.50}%
\contentsline {figure}{\numberline {7.2}{\ignorespaces Example starting state, in which all arcs are consistent}}{29}{figure.caption.51}%
\contentsline {figure}{\numberline {7.3}{\ignorespaces After assigning Cube to A, <B,A> is no longer consistent}}{29}{figure.caption.52}%
\contentsline {figure}{\numberline {7.4}{\ignorespaces Revising arc <B,A>}}{30}{figure.caption.53}%
\contentsline {figure}{\numberline {7.5}{\ignorespaces Revising <B,A> results in <C,B> becoming inconsistent}}{30}{figure.caption.54}%
\contentsline {figure}{\numberline {7.6}{\ignorespaces The graph after AC3 has been carried out}}{30}{figure.caption.55}%
\addvspace {10\p@ }
\contentsline {figure}{\numberline {8.1}{\ignorespaces The three parts of the recursive MAC3 method}}{38}{figure.caption.61}%
\addvspace {10\p@ }
\addvspace {10\p@ }
\contentsline {figure}{\numberline {10.1}{\ignorespaces Key areas of further development}}{42}{figure.caption.68}%
\addvspace {10\p@ }
\addvspace {10\p@ }
\addvspace {10\p@ }
\addvspace {10\p@ }
\addvspace {10\p@ }
