@book{pcgbook,
  title     = {Procedural Content Generation in Games: A Textbook and an Overview of Current Research},
  author    = {Noor Shaker and Julian Togelius and Mark J. Nelson},
  year      = 2016,
  doi       = {10.1007/978-3-319-42716-4},
  publisher = {Springer},
  url       = {https://www.pcgbook.com/},
  urldate   = {2023-09-12}
}
@misc{minecraft,
  title     = {Here’s how “Minecraft” creates its gigantic worlds},
  url       = {https://www.engadget.com/2015-03-04-how-minecraft-worlds-are-made.html},
  journal   = {Engadget},
  publisher = {Engadget},
  author    = {Fingas, Jon},
  year      = {2019},
  month     = 7,
  urldate   = {2023-09-12}
}
@misc{nomanssky,
  title     = {A look at how no man’s Sky’s procedural generation works},
  url       = {https://kotaku.com/a-look-at-how-no-mans-skys-procedural-generation-works-1787928446},
  journal   = {Kotaku},
  publisher = {Kotaku},
  author    = {Alexandra, Heather},
  year      = {2016},
  month     = 10,
  urldate   = {2023-09-12}
}
@misc{borderlands,
  title     = {How many weapons are in borderlands 2?},
  url       = {https://www.eurogamer.net/how-many-weapons-are-in-borderlands-2},
  journal   = {Eurogamer.net},
  publisher = {Eurogamer.net},
  author    = {Yin-Poole, Wesley},
  year      = {2012},
  month     = 7,
  urldate   = {2023-09-12}
}
@misc{shadowofmordor,
  title   = {7 uses of procedural generation that all developers should study},
  url     = {https://www.gamedeveloper.com/design/7-uses-of-procedural-generation-that-all-developers-should-study},
  journal = {Game Developer},
  author  = {Game DeveloperStaffJanuary 01, 2016},
  year    = {2016},
  month   = 1,
  urldate = {2023-09-12}
}
@misc{townscaper,
  title   = {Townscaper},
  url     = {https://www.townscapergame.com/},
  journal = {Townscaper},
  author  = {Oskar Stålberg},
  year    = {2020},
  urldate = {2023-09-13}
}
@misc{badnorth,
  title   = {Bad North},
  url     = {https://www.badnorth.com/},
  journal = {Bad North},
  author  = {Oskar Stålberg},
  year    = {2018},
  urldate = {2023-09-13}
}
@misc{cavesofqud,
  title   = {Caves of Qud},
  url     = {https://www.cavesofqud.com/},
  author  = {{Freehold Games}},
  year    = {2023},
  urldate = {2023-10-30}
}
@inproceedings{WFC_In_The_Wild,
  author    = {Karth, Isaac and Smith, Adam M.},
  title     = {WaveFunctionCollapse is Constraint Solving in the Wild},
  year      = {2017},
  isbn      = {9781450353199},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/3102071.3110566},
  doi       = {10.1145/3102071.3110566},
  abstract  = {Maxim Gumin's WaveFunctionCollapse (WFC) algorithm is an example-driven image generation algorithm emerging from the craft practice of procedural content generation. In WFC, new images are generated in the style of given examples by ensuring every local window of the output occurs somewhere in the input. Operationally, WFC implements a non-backtracking, greedy search method. This paper examines WFC as an instance of constraint solving methods. We trace WFC's explosive influence on the technical artist community, explain its operation in terms of ideas from the constraint solving literature, and probe its strengths by means of a surrogate implementation using answer set programming.},
  booktitle = {Proceedings of the 12th International Conference on the Foundations of Digital Games},
  articleno = {68},
  numpages  = {10},
  keywords  = {texture synthesis, procedural content generation, constraint solving},
  location  = {Hyannis, Massachusetts},
  series    = {FDG '17}
}
@inproceedings{WFC_Graph-based,
  author    = {Kim, Hwanhee and Lee, Seongtaek and Lee, Hyundong and Hahn, Teasung and Kang, Shinjin},
  booktitle = {2019 IEEE Conference on Games (CoG)},
  title     = {Automatic Generation of Game Content using a Graph-based Wave Function Collapse Algorithm},
  year      = {2019},
  volume    = {},
  number    = {},
  pages     = {1-4},
  doi       = {10.1109/CIG.2019.8848019}
}
@article{model_synthesis,
  author  = {Merrell, Paul and Manocha, Dinesh},
  journal = {IEEE Transactions on Visualization and Computer Graphics},
  title   = {Model Synthesis: A General Procedural Modeling Algorithm},
  year    = {2011},
  volume  = {17},
  number  = {6},
  pages   = {715-728},
  doi     = {10.1109/TVCG.2010.112}
}
@software{Gumin_Wave_Function_Collapse_2016,
  author  = {Gumin, Maxim},
  month   = sep,
  title   = {{Wave Function Collapse Algorithm}},
  url     = {https://github.com/mxgmn/WaveFunctionCollapse},
  version = {1.0},
  year    = {2016}
}
@phdthesis{WFC_Neural_Network,
  author = {Møller, Tobias and Billeskov, Jonas},
  year   = {2019},
  month  = {05},
  pages  = {},
  title  = {Expanding Wave Function Collapse with Growing Grids for Procedural Content Generation.},
  doi    = {10.13140/RG.2.2.23494.01607}
}
@misc{Infinite_Modifying_In_Blocks,
  title   = {Infinite modifying in blocks},
  url     = {https://www.boristhebrave.com/2021/11/08/infinite-modifying-in-blocks/},
  journal = {BorisTheBrave.Com},
  author  = {Boris},
  year    = {2022},
  month   = Jun
} 
@misc{Nested_WFC,
  title         = {Extend Wave Function Collapse to Large-Scale Content Generation},
  author        = {Yuhe Nie and Shaoming Zheng and Zhan Zhuang and Xuan Song},
  year          = {2023},
  eprint        = {2308.07307},
  archiveprefix = {arXiv},
  primaryclass  = {cs.AI}
}
@misc{AIGC_Survey,
  title         = {A Comprehensive Survey of AI-Generated Content (AIGC): A History of Generative AI from GAN to ChatGPT},
  author        = {Yihan Cao and Siyu Li and Yixin Liu and Zhiling Yan and Yutong Dai and Philip S. Yu and Lichao Sun},
  year          = {2023},
  eprint        = {2303.04226},
  archiveprefix = {arXiv},
  primaryclass  = {cs.AI}
}
@misc{Magic3D,
  title         = {Magic3D: High-Resolution Text-to-3D Content Creation},
  author        = {Chen-Hsuan Lin and Jun Gao and Luming Tang and Towaki Takikawa and Xiaohui Zeng and Xun Huang and Karsten Kreis and Sanja Fidler and Ming-Yu Liu and Tsung-Yi Lin},
  year          = {2023},
  eprint        = {2211.10440},
  archiveprefix = {arXiv},
  primaryclass  = {cs.CV}
}
@inproceedings{Self_Driving_Cars,
  author    = {Gambi, Alessio and Mueller, Marc and Fraser, Gordon},
  title     = {Automatically Testing Self-Driving Cars with Search-Based Procedural Content Generation},
  year      = {2019},
  isbn      = {9781450362245},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/3293882.3330566},
  doi       = {10.1145/3293882.3330566},
  abstract  = {Self-driving cars rely on software which needs to be thoroughly tested. Testing self-driving car software in real traffic is not only expensive but also dangerous, and has already caused fatalities. Virtual tests, in which self-driving car software is tested in computer simulations, offer a more efficient and safer alternative compared to naturalistic field operational tests. However, creating suitable test scenarios is laborious and difficult. In this paper we combine procedural content generation, a technique commonly employed in modern video games, and search-based testing, a testing technique proven to be effective in many domains, in order to automatically create challenging virtual scenarios for testing self-driving car soft- ware. Our AsFault prototype implements this approach to generate virtual roads for testing lane keeping, one of the defining features of autonomous driving. Evaluation on two different self-driving car software systems demonstrates that AsFault can generate effective virtual road networks that succeed in revealing software failures, which manifest as cars departing their lane. Compared to random testing AsFault was not only more efficient, but also caused up to twice as many lane departures.},
  booktitle = {Proceedings of the 28th ACM SIGSOFT International Symposium on Software Testing and Analysis},
  pages     = {318–328},
  numpages  = {11},
  keywords  = {automatic test generation, procedural content generation, search-based testing, self-driving cars},
  location  = {Beijing, China},
  series    = {ISSTA 2019}
}
@misc{Stable_Diffusion,
  author  = {{Stability AI}},
  title   = {Stable Diffusion Generative Models},
  url     = {https://github.com/Stability-AI/generative-models},
  urldate = {2023-10-26}
}
@misc{Chat_GPT,
  author  = {OpenAI},
  title   = {ChatGPT},
  url     = {https://chat.openai.com/},
  urldate = {2023-10-26}
}
@misc{GitHub_Copilot,
  author  = {GitHub},
  title   = {GitHub Copilot},
  url     = {https://github.com/features/copilot},
  urldate = {2023-10-26}
}
@article{DeepLearningPCG,
  author   = {Liu, Jialin
              and Snodgrass, Sam
              and Khalifa, Ahmed
              and Risi, Sebastian
              and Yannakakis, Georgios N.
              and Togelius, Julian},
  title    = {Deep learning for procedural content generation},
  journal  = {Neural Computing and Applications},
  year     = {2021},
  month    = Jan,
  day      = {01},
  volume   = {33},
  number   = {1},
  pages    = {19-37},
  abstract = {Procedural content generation in video games has a long history. Existing procedural content generation methods, such as search-based, solver-based, rule-based and grammar-based methods have been applied to various content types such as levels, maps, character models, and textures. A research field centered on content generation in games has existed for more than a decade. More recently, deep learning has powered a remarkable range of inventions in content production, which are applicable to games. While some cutting-edge deep learning methods are applied on their own, others are applied in combination with more traditional methods, or in an interactive setting. This article surveys the various deep learning methods that have been applied to generate game content directly or indirectly, discusses deep learning methods that could be used for content generation purposes but are rarely used today, and envisages some limitations and potential future directions of deep learning for procedural content generation.},
  issn     = {1433-3058},
  doi      = {10.1007/s00521-020-05383-8},
  url      = {https://doi.org/10.1007/s00521-020-05383-8}
}
@article{VGDL,
  author  = {Perez-Liebana, Diego and Liu, Jialin and Khalifa, Ahmed and Gaina, Raluca D. and Togelius, Julian and Lucas, Simon M.},
  journal = {IEEE Transactions on Games},
  title   = {General Video Game AI: A Multitrack Framework for Evaluating Agents, Games, and Content Generation Algorithms},
  year    = {2019},
  volume  = {11},
  number  = {3},
  pages   = {195-214},
  doi     = {10.1109/TG.2019.2901021}
}
@inproceedings{VGDL_ASP,
  author    = {Neufeld, Xenija and Mostaghim, Sanaz and Perez-Liebana, Diego},
  booktitle = {2015 7th Computer Science and Electronic Engineering Conference (CEEC)},
  title     = {Procedural level generation with answer set programming for general Video Game playing},
  year      = {2015},
  volume    = {},
  number    = {},
  pages     = {207-212},
  doi       = {10.1109/CEEC.2015.7332726}
}
@inproceedings{CESAGAN,
  author    = {Rodriguez Torrado, Ruben and Khalifa, Ahmed and Cerny Green, Michael and Justesen, Niels and Risi, Sebastian and Togelius, Julian},
  booktitle = {2020 IEEE Conference on Games (CoG)},
  title     = {Bootstrapping Conditional GANs for Video Game Level Generation},
  year      = {2020},
  volume    = {},
  number    = {},
  pages     = {41-48},
  doi       = {10.1109/CoG47356.2020.9231576}
}
@article{Markov_PCGRL,
  title        = {PCGRL: Procedural Content Generation via Reinforcement Learning},
  volume       = {16},
  url          = {https://ojs.aaai.org/index.php/AIIDE/article/view/7416},
  doi          = {10.1609/aiide.v16i1.7416},
  abstractnote = {&lt;p class=&quot;abstract&quot;&gt;We investigate how reinforcement learning can be used to train level-designing agents. This represents a new approach to procedural content generation in games, where level design is framed as a game, and the content generator itself is learned. By seeing the design problem as a sequential task, we can use reinforcement learning to learn how to take the next action so that the expected final level quality is maximized. This approach can be used when few or no examples exist to train from, and the trained generator is very fast. We investigate three different ways of transforming two-dimensional level design problems into Markov decision processes, and apply these to three game environments.&lt;/p&gt;},
  number       = {1},
  journal      = {Proceedings of the AAAI Conference on Artificial Intelligence and Interactive Digital Entertainment},
  author       = {Khalifa, Ahmed and Bontrager, Philip and Earle, Sam and Togelius, Julian},
  year         = {2020},
  month        = Oct,
  pages        = {95-101}
}
@article{PCGML,
  author  = {Summerville, Adam and Snodgrass, Sam and Guzdial, Matthew and Holmgård, Christoffer and Hoover, Amy K. and Isaksen, Aaron and Nealen, Andy and Togelius, Julian},
  journal = {IEEE Transactions on Games},
  title   = {Procedural Content Generation via Machine Learning (PCGML)},
  year    = {2018},
  volume  = {10},
  number  = {3},
  pages   = {257-270},
  doi     = {10.1109/TG.2018.2846639}
}
@article{WFC_ConstraintSolving_and_ML,
  author  = {Karth, Isaac and Smith, Adam M.},
  journal = {IEEE Transactions on Games},
  title   = {WaveFunctionCollapse: Content Generation via Constraint Solving and Machine Learning},
  year    = {2022},
  volume  = {14},
  number  = {3},
  pages   = {364-376},
  doi     = {10.1109/TG.2021.3076368}
}
@misc{Easy_WFC,
  author  = {Garnet Kane},
  title   = {Easy Wave Function Collapse},
  url     = {https://github.com/GarnetKane99/WaveFunctionCollapse},
  urldate = {2023-10-30}
}
@inbook{WFC_Automatic_Rules_And_Better_Symmetries,
  author = {Cheng, Darui and Han, Honglei and Fei, Guangzheng},
  year   = {2020},
  month  = {01},
  pages  = {37-50},
  title  = {Automatic Generation of Game Levels Based on Controllable Wave Function Collapse Algorithm},
  isbn   = {978-3-030-65735-2},
  doi    = {10.1007/978-3-030-65736-9_3}
}
@inproceedings{WFC_Design_Constraints,
  author    = {Sandhu, Arunpreet and Chen, Zeyuan and McCoy, Joshua},
  title     = {Enhancing Wave Function Collapse with Design-Level Constraints},
  year      = {2019},
  isbn      = {9781450372176},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/3337722.3337752},
  doi       = {10.1145/3337722.3337752},
  abstract  = {Wave Function Collapse (WFC) is a non-backtracking, greedy search algorithm that is commonly known for its ability to take an example image and generate similar images. Since its inception, technical artists have explored the algorithm's extensibility and usability through various implementations spanning from 3D world generation to poetry creation. However, there has been no integration of design constraints into the generative process. In this paper, we explore WFC as a constraint satisfaction solver to integrate design principles and practices by modifying components within the algorithm. First, we extend the local constraint reasoning by incorporating non-local constraints as well as upper and lower bounds. Next, we further manipulate the generative space by introducing weight recalculation and dependencies. Lastly, we evaluate our design-focused variant of WFC against the original implementation to examine the associated costs in computational time and memory usage. In summary, this paper describes a technical implementation of integrating design constraints into WFC and analyzes the computational trade-offs.},
  booktitle = {Proceedings of the 14th International Conference on the Foundations of Digital Games},
  articleno = {17},
  numpages  = {9},
  keywords  = {level generation, procedural content generation, wave function collapse},
  location  = {San Luis Obispo, California, USA},
  series    = {FDG '19}
}
@misc{CSPLib,
  author  = {Chris Jefferson and Özgür Akgün and Bilal Syed Hussain and Ian Miguel and Brahim Hnich and Ian Gent and Toby Walsh},
  title   = {CSPLib Problems Library},
  url     = {https://www.csplib.org/Problems/categories.html},
  urldate = {2023-10-31}
}
@article{Combinatorics_CP_RL,
  title        = {Combining Reinforcement Learning and Constraint Programming for Combinatorial Optimization},
  volume       = {35},
  url          = {https://ojs.aaai.org/index.php/AAAI/article/view/16484},
  doi          = {10.1609/aaai.v35i5.16484},
  abstractnote = {Combinatorial optimization has found applications in numerous fields, from aerospace to transportation planning and economics. The goal is to find an optimal solution among a finite set of possibilities. The well-known challenge one faces with combinatorial optimization is the state-space explosion problem: the number of possibilities grows exponentially with the problem size, which makes solving intractable for large problems. In the last years, deep reinforcement learning (DRL) has shown its promise for designing good heuristics dedicated to solve NP-hard combinatorial optimization problems. However, current approaches have an important shortcoming: they only provide an approximate solution with no systematic ways to improve it or to prove optimality. In another context, constraint programming (CP) is a generic tool to solve combinatorial optimization problems. Based on a complete search procedure, it will always find the optimal solution if we allow an execution time large enough. A critical design choice, that makes CP non-trivial to use in practice, is the branching decision, directing how the search space is explored. In this work, we propose a general and hybrid approach, based on DRL and CP, for solving combinatorial optimization problems. The core of our approach is based on a dynamic programming formulation, that acts as a bridge between both techniques. We experimentally show that our solver is efficient to solve three challenging problems: the traveling salesman problem with time windows, the 4-moments portfolio optimization problem, and the 0-1 knapsack problem. Results obtained show that the framework introduced outperforms the stand-alone RL and CP solutions, while being competitive with industrial solvers.},
  number       = {5},
  journal      = {Proceedings of the AAAI Conference on Artificial Intelligence},
  author       = {Cappart, Quentin and Moisan, Thierry and Rousseau, Louis-Martin and Prémont-Schwarz, Isabeau and Cire, Andre A.},
  year         = {2021},
  month        = 05,
  pages        = {3677-3687}
}
@article{Combinatorics_Streamliner_Constraints,
  title    = {Automated streamliner portfolios for constraint satisfaction problems},
  journal  = {Artificial Intelligence},
  volume   = {319},
  pages    = {103915},
  year     = {2023},
  issn     = {0004-3702},
  doi      = {https://doi.org/10.1016/j.artint.2023.103915},
  url      = {https://www.sciencedirect.com/science/article/pii/S0004370223000619},
  author   = {Patrick Spracklen and Nguyen Dang and Özgür Akgün and Ian Miguel},
  keywords = {Constraint programming, Constraint modelling, Constraint satisfaction problem, Algorithm selection},
  abstract = {Constraint Programming (CP) is a powerful technique for solving large-scale combinatorial problems. Solving a problem proceeds in two distinct phases: modelling and solving. Effective modelling has a huge impact on the performance of the solving process. Even with the advance of modern automated modelling tools, search spaces involved can be so vast that problems can still be difficult to solve. To further constrain the model, a more aggressive step that can be taken is the addition of streamliner constraints, which are not guaranteed to be sound but are designed to focus effort on a highly restricted but promising portion of the search space. Previously, producing effective streamlined models was a manual, difficult and time-consuming task. This paper presents a completely automated process to the generation, search and selection of streamliner portfolios to produce a substantial reduction in search effort across a diverse range of problems. The results demonstrate a marked improvement in performance for both Chuffed, a CP solver with clause learning, and lingeling, a modern SAT solver.}
}
@book{Data_Mining_and_Constraint_Programming,
  address    = {Cham},
  series     = {Lecture Notes in Computer Science},
  title      = {Data Mining and Constraint Programming: Foundations of a Cross-Disciplinary Approach},
  volume     = {10101},
  isbn       = {9783319501369},
  url        = {http://link.springer.com/10.1007/978-3-319-50137-6},
  doi        = {10.1007/978-3-319-50137-6},
  publisher  = {Springer International Publishing},
  year       = {2016},
  collection = {Lecture Notes in Computer Science},
  language   = {en}
}
@inproceedings{Plotting_Planning_Problem,
  author    = {Espasa, Joan and Miguel, Ian and Villaret, Mateu},
  title     = {{Plotting: A Planning Problem with Complex Transitions}},
  booktitle = {28th International Conference on Principles and Practice of Constraint Programming (CP 2022)},
  pages     = {22:1--22:17},
  series    = {Leibniz International Proceedings in Informatics (LIPIcs)},
  isbn      = {978-3-95977-240-2},
  issn      = {1868-8969},
  year      = {2022},
  volume    = {235},
  editor    = {Solnon, Christine},
  publisher = {Schloss Dagstuhl -- Leibniz-Zentrum f{\"u}r Informatik},
  address   = {Dagstuhl, Germany},
  url       = {https://drops.dagstuhl.de/opus/volltexte/2022/16651},
  urn       = {urn:nbn:de:0030-drops-166514},
  doi       = {10.4230/LIPIcs.CP.2022.22},
  annote    = {Keywords: AI Planning, Modelling, Constraint Programming}
}
@article{Prolog_Deep_Learning,
  author   = {De Gasperis, Giovanni and Costantini, Stefania and Rafanelli, Andrea and Migliarini, Patrizio and Letteri, Ivan and Dyoub, Abeer},
  title    = {{Extension of constraint-procedural logic-generated environments for deep Q-learning agent training and benchmarking}},
  journal  = {Journal of Logic and Computation},
  pages    = {exad032},
  year     = {2023},
  month    = {06},
  abstract = {{Autonomous robots can be employed in exploring unknown environments and performing many tasks, such as, e.g. detecting areas of interest, collecting target objects, etc. Deep reinforcement learning (RL) is often used to train this kind of robot. However, concerning the artificial environments aimed at testing the robot, there is a lack of available data sets and a long time is needed to create them from scratch. A good data set is in fact usually produced with high effort in terms of cost and human work to satisfy the constraints imposed by the expected results. In the first part of this paper, we focus on the specification of the properties of the solutions needed to build a data set, making the case of environment exploration. In the proposed approach, rather than using imperative programming, we explore the possibility of generating data sets using constraint programming in Prolog. In this phase, geometric predicates describe a virtual environment according to inter-space requirements. The second part of the paper is focused on testing the generated data set in an AI gym via space search techniques. We developed a Neuro-Symbolic agent built from the following: (i) A deep Q-learning component implemented in Python, able to address via RL a search problem in the virtual space; the agent has the goal to explore a generated virtual environment to seek for a target, improving its performance through a RL process. (ii) A symbolic component able to re-address the search when the Q-learning component gets stuck in a part of the virtual environment; these components stimulate the agent to move to and explore other parts of the environment. Wide experimentation has been performed, with promising results, and is reported, to demonstrate the effectiveness of the approach.}},
  issn     = {0955-792X},
  doi      = {10.1093/logcom/exad032},
  url      = {https://doi.org/10.1093/logcom/exad032},
  eprint   = {https://academic.oup.com/logcom/advance-article-pdf/doi/10.1093/logcom/exad032/50530031/exad032.pdf}
}
@inproceedings{Graph_Constraint_Dungeon,
  author    = {Glorian, Ga\"{e}l and Debesson, Adrien and Yvon-Paliot, Sylvain and Simon, Laurent},
  title     = {{The Dungeon Variations Problem Using Constraint Programming}},
  booktitle = {27th International Conference on Principles and Practice of Constraint Programming (CP 2021)},
  pages     = {27:1--27:16},
  series    = {Leibniz International Proceedings in Informatics (LIPIcs)},
  isbn      = {978-3-95977-211-2},
  issn      = {1868-8969},
  year      = {2021},
  volume    = {210},
  editor    = {Michel, Laurent D.},
  publisher = {Schloss Dagstuhl -- Leibniz-Zentrum f{\"u}r Informatik},
  address   = {Dagstuhl, Germany},
  url       = {https://drops.dagstuhl.de/opus/volltexte/2021/15318},
  urn       = {urn:nbn:de:0030-drops-153181},
  doi       = {10.4230/LIPIcs.CP.2021.27},
  annote    = {Keywords: constraint programming, video games, modelization, procedural generation}
}
@inproceedings{GVG-AI_and_VGDL_Level_Generators,
  author    = {Khalifa, Ahmed and Perez-Liebana, Diego and Lucas, Simon M. and Togelius, Julian},
  title     = {General Video Game Level Generation},
  year      = {2016},
  isbn      = {9781450342063},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/2908812.2908920},
  doi       = {10.1145/2908812.2908920},
  abstract  = {This paper presents a framework and an initial study in general video game level generation, the problem of generating levels for not only a single game but for any game within a specified range. While existing level generators are tailored to a particular game, this new challenge requires generators to take into account the constraints and affordances of games that might not even have been designed when the generator was constructed. The framework presented here builds on the General Video Game AI framework (GVG-AI) and the Video Game Description Language (VGDL), in order to reap synergies from research activities connected to the General Video Game Playing Competition. The framework will also form the basis for a new track of this competition. In addition to the framework, the paper presents three general level generators and an empirical comparison of their qualities.},
  booktitle = {Proceedings of the Genetic and Evolutionary Computation Conference 2016},
  pages     = {253–259},
  numpages  = {7},
  keywords  = {general video game playing, level generation, procedural content generation, video game description language},
  location  = {Denver, Colorado, USA},
  series    = {GECCO '16}
}
@inproceedings{Metamorphic_Testing,
  author    = {Akg{\"u}n, {\"O}zg{\"u}r
               and Gent, Ian P.
               and Jefferson, Christopher
               and Miguel, Ian
               and Nightingale, Peter},
  editor    = {Hooker, John},
  title     = {Metamorphic Testing of Constraint Solvers},
  booktitle = {Principles and Practice of Constraint Programming},
  year      = {2018},
  publisher = {Springer International Publishing},
  address   = {Cham},
  pages     = {727--736},
  abstract  = {Constraint solvers are complex pieces of software and are notoriously difficult to debug. In large part this is due to the difficulty of pinpointing the source of an error in the vast searches these solvers perform, since the effect of an error may only come to light long after the error is made. In addition, an error does not necessarily lead to the wrong result, further complicating the debugging process. A major source of errors in a constraint solver is the complex constraint propagation algorithms that provide the inference that controls and directs the search. In this paper we show that metamorphic testing is a principled way to test constraint solvers by comparing two different implementations of the same constraint. Specifically, specialised propagators for the constraint are tested against the general purpose table constraint propagator. We report on metamorphic testing of the constraint solver Minion. We demonstrate that the metamorphic testing method is very effective for finding artificial bugs introduced by random code mutation.},
  isbn      = {978-3-319-98334-9}
}

@misc{sketchfab_texture,
  author  = {{Scans and textures}},
  title   = {The Backrooms Wallpaper Texture},
  url     = {https://sketchfab.com/3d-models/the-backrooms-wallpaper-texture-f7d2757432f94a2bb366c9a41503647b},
  urldate = {2023-12-31}
}

@misc{backroomsGraphics,
  author  = {{Default Cube}},
  title   = {YouTube Video},
  url     = {https://youtu.be/_u0dy3TMZ_s},
  urldate = {2023-12-30}
}

@misc{neonrogue_github,
  author  = {{Memóri Studios}},
  title   = {{NeonRogue} Repository},
  url     = {https://github.com/Memori-Studios/NeonRogue/tree/main/Scripts/Map},
  urldate = {2024-01-02}
}

@misc{letterboxer_github,
  author  = {{rabidgremlin}},
  title   = {{LetterBoxer} Repository},
  url     = {https://github.com/rabidgremlin/LetterBoxer/},
  urldate = {2024-01-15}
}

@misc{carpet_texture,
  author  = {{TextureCan}},
  title   = {Wool Carpet Texture},
  url     = {https://www.texturecan.com/details/148/},
  urldate = {2024-01-18}
}

@misc{ceiling_texture,
  author  = {{TextureCan}},
  title   = {Office Ceiling Tiles Texture},
  url     = {https://www.texturecan.com/details/131/},
  urldate = {2024-01-19}
}

@misc{actionvfx_lens_dirt,
  author  = {{ActionVFX}},
  title   = {Lens Dirt Overlays},
  url     = {https://www.actionvfx.com/collections/free-lens-dirt-overlays},
  urldate = {2024-01-18}
}

@misc{vhsGraphicsGuide,
  author  = {{Carrots In The Sky}},
  title   = {How to make realistic VHS style graphics really fast for your game},
  url     = {https://youtu.be/BK_NnKr4r04},
  urldate = {2024-01-20}
}

@misc{enchanted_media,
  author  = {{Enchanted Media}},
  title   = {VHS Effect Overlay Video},
  url     = {https://www.enchanted.media/downloads/free-vhs-effect-overlay-video/},
  urldate = {2024-01-20}
}

@misc{youtube_video3,
  author  = {{Haro Games}},
  title   = {VHS Retro Effect - Unity Tutorial},
  url     = {https://youtu.be/CHUS0udL9Nk},
  urldate = {2024-01-20}
}

@misc{lighting_models,
  author  = {Unity},
  title   = {Forward and Deferred rendering},
  url     = {https://docs.unity3d.com/Packages/com.unity.render-pipelines.high-definition@17.0/manual/Forward-And-Deferred-Rendering.html},
  urldate = {2024-02-20}
}
@misc{model_synthesis_diss,
  author  = {Paul C. Merrell},
  title   = {Model Synthesis},
  url     = {https://gamma-web.iacs.umd.edu/papers/documents/dissertations/merrell09.pdf},
  urldate = {2024-03-05}
}
@misc{FPS_controller_YouTube,
  author  = {Dustin Morman},
  title   = {How To Make An FPS Player In Under A Minute - Unity Tutorial},
  url     = {https://www.youtube.com/watch?v=qQLvcS9FxnY},
  urldate = {2023-10-05}
}
@misc{FPS_controller_GitHub,
  author  = {Dustin Morman},
  title   = {FPSController},
  url     = {https://github.com/dustinmorman/FPSControllerTutorial/blob/main/Assets/Scripts/FPSController.cs},
  urldate = {2023-11-10}
}
@misc{GDC_caves_of_qud,
  author  = {Brian Bucklew},
  title   = {Math for Game Developers: Tile-Based Map Generation Using WaveFunctionCollapse in Caves of Qud},
  url     = {https://www.gdcvault.com/play/1026263/Math-for-Game-Developers-Tile},
  urldate = {2024-03-10}
}
@misc{WFC_poetry,
  author  = {Martin O'Leary},
  title   = {Oisín: Wave Function Collapse for poetry},
  url     = {https://github.com/mewo2/oisin},
  urldate = {2024-03-13}
}
@misc{WFC_music,
  author  = {Pál Patrik Varga, Rafael Bidarra},
  title   = {Procedural mixed-initiative music composition with hierarchical Wave Function Collapse},
  url     = {https://graphics.tudelft.nl/Publications-new/2023/VB23/WFC_audio_PCG_WS_demo.final.pdf},
  urldate = {2024-03-13}
}
@misc{WFC_music_2,
  author  = {Breanna Baltaxe-Admony},
  title   = {wfc piano roll},
  url     = {https://github.com/bbaltaxe/wfc-piano-roll},
  urldate = {2024-03-13}
}
@misc{unity-WFC,
  author  = {Joseph Allen Parker},
  title   = {unity-wave-function-collapse},
  url     = {https://selfsame.itch.io/unitywfc},
  urldate = {2023-09-25}
}
@misc{unity-WFC-3D,
  author  = {Maksim Priakhin, Sam Keightley},
  title   = {unity-wave-function-collapse-3d},
  url     = {https://github.com/oddmax/unity-wave-function-collapse-3d},
  urldate = {2023-09-20}
}
@misc{unreal_engine_WFC,
  author  = {{Epic Games}},
  title   = {Wave Function Collapse},
  url     = {https://docs.unrealengine.com/5.0/en-US/BlueprintAPI/WaveFunctionCollapse/},
  urldate = {2024-03-13}
}
@misc{minecraft_screenshot,
  author  = {Minecraft},
  title   = {Minecraft Caves and Cliffs Snapshot Twitter Post},
  url     = {https://twitter.com/Minecraft/status/1414978446229393420},
  urldate = {2024-03-17}
}